// Code generated by protoc-gen-go. DO NOT EDIT.
// source: GroupMessageService.proto

package com_dipper_proto_rpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GroupMessagePro struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId               int32    `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	GroupId              int32    `protobuf:"varint,3,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Content              string   `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	IsDel                int32    `protobuf:"varint,5,opt,name=is_del,json=isDel,proto3" json:"is_del,omitempty"`
	IsRead               int32    `protobuf:"varint,6,opt,name=is_read,json=isRead,proto3" json:"is_read,omitempty"`
	SendTime             string   `protobuf:"bytes,7,opt,name=send_time,json=sendTime,proto3" json:"send_time,omitempty"`
	IsBack               int32    `protobuf:"varint,8,opt,name=is_back,json=isBack,proto3" json:"is_back,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GroupMessagePro) Reset()         { *m = GroupMessagePro{} }
func (m *GroupMessagePro) String() string { return proto.CompactTextString(m) }
func (*GroupMessagePro) ProtoMessage()    {}
func (*GroupMessagePro) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd7342481b93f9c3, []int{0}
}

func (m *GroupMessagePro) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GroupMessagePro.Unmarshal(m, b)
}
func (m *GroupMessagePro) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GroupMessagePro.Marshal(b, m, deterministic)
}
func (m *GroupMessagePro) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupMessagePro.Merge(m, src)
}
func (m *GroupMessagePro) XXX_Size() int {
	return xxx_messageInfo_GroupMessagePro.Size(m)
}
func (m *GroupMessagePro) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupMessagePro.DiscardUnknown(m)
}

var xxx_messageInfo_GroupMessagePro proto.InternalMessageInfo

func (m *GroupMessagePro) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GroupMessagePro) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GroupMessagePro) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *GroupMessagePro) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *GroupMessagePro) GetIsDel() int32 {
	if m != nil {
		return m.IsDel
	}
	return 0
}

func (m *GroupMessagePro) GetIsRead() int32 {
	if m != nil {
		return m.IsRead
	}
	return 0
}

func (m *GroupMessagePro) GetSendTime() string {
	if m != nil {
		return m.SendTime
	}
	return ""
}

func (m *GroupMessagePro) GetIsBack() int32 {
	if m != nil {
		return m.IsBack
	}
	return 0
}

func init() {
	proto.RegisterType((*GroupMessagePro)(nil), "com.dipper.proto.rpc.GroupMessagePro")
}

func init() {
	proto.RegisterFile("GroupMessageService.proto", fileDescriptor_dd7342481b93f9c3)
}

var fileDescriptor_dd7342481b93f9c3 = []byte{
	// 242 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xcf, 0x4a, 0x03, 0x31,
	0x10, 0xc6, 0x49, 0x75, 0xff, 0x74, 0x0e, 0x8a, 0xd1, 0x62, 0x8a, 0x97, 0xe2, 0xa9, 0x20, 0xec,
	0x41, 0xdf, 0x60, 0x11, 0xa4, 0x07, 0xa1, 0xac, 0xde, 0x97, 0x34, 0x33, 0x94, 0xa1, 0xdd, 0x4d,
	0x48, 0x52, 0xdf, 0xd4, 0xf7, 0x91, 0xa4, 0x16, 0x44, 0x7a, 0xfc, 0xbe, 0x8f, 0xdf, 0x0c, 0xfc,
	0x60, 0xfe, 0xe6, 0xed, 0xc1, 0xbd, 0x53, 0x08, 0x7a, 0x4b, 0x1f, 0xe4, 0xbf, 0xd8, 0x50, 0xe3,
	0xbc, 0x8d, 0x56, 0xde, 0x19, 0x3b, 0x34, 0xc8, 0xce, 0x91, 0x3f, 0x36, 0x8d, 0x77, 0xe6, 0xf1,
	0x5b, 0xc0, 0xf5, 0x5f, 0x66, 0xed, 0xad, 0xbc, 0x82, 0x09, 0xa3, 0x12, 0x0b, 0xb1, 0x2c, 0xba,
	0x09, 0xa3, 0xbc, 0x87, 0xea, 0x10, 0xc8, 0xf7, 0x8c, 0x6a, 0x92, 0xcb, 0x32, 0xc5, 0x15, 0xca,
	0x39, 0xd4, 0xdb, 0xc4, 0xa6, 0xe5, 0x22, 0x2f, 0x55, 0xce, 0x2b, 0x94, 0x0a, 0x2a, 0x63, 0xc7,
	0x48, 0x63, 0x54, 0x97, 0x0b, 0xb1, 0x9c, 0x76, 0xa7, 0x28, 0x67, 0x50, 0x72, 0xe8, 0x91, 0xf6,
	0xaa, 0xc8, 0x48, 0xc1, 0xe1, 0x95, 0xf6, 0xe9, 0x09, 0x87, 0xde, 0x93, 0x46, 0x55, 0x1e, 0x9f,
	0x70, 0xe8, 0x48, 0xa3, 0x7c, 0x80, 0x69, 0xa0, 0x11, 0xfb, 0xc8, 0x03, 0xa9, 0x2a, 0xdf, 0xaa,
	0x53, 0xf1, 0xc9, 0x03, 0xfd, 0x52, 0x1b, 0x6d, 0x76, 0xaa, 0x3e, 0x51, 0xad, 0x36, 0xbb, 0xe7,
	0x19, 0xdc, 0x9e, 0x51, 0xd1, 0x3e, 0xc1, 0x59, 0x0d, 0xed, 0xcd, 0x3f, 0x07, 0xd1, 0xae, 0xc5,
	0xa6, 0xcc, 0xfb, 0xcb, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb7, 0xde, 0xbb, 0x8d, 0x55, 0x01,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GroupMessageServiceClient is the client API for GroupMessageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GroupMessageServiceClient interface {
}

type groupMessageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupMessageServiceClient(cc grpc.ClientConnInterface) GroupMessageServiceClient {
	return &groupMessageServiceClient{cc}
}

// GroupMessageServiceServer is the server API for GroupMessageService service.
type GroupMessageServiceServer interface {
}

// UnimplementedGroupMessageServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGroupMessageServiceServer struct {
}

func RegisterGroupMessageServiceServer(s *grpc.Server, srv GroupMessageServiceServer) {
	s.RegisterService(&_GroupMessageService_serviceDesc, srv)
}

var _GroupMessageService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "com.dipper.proto.rpc.GroupMessageService",
	HandlerType: (*GroupMessageServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "GroupMessageService.proto",
}
