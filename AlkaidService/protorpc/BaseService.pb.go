// Code generated by protoc-gen-go. DO NOT EDIT.
// source: BaseService.proto

package com_dipper_proto_rpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MessageType int32

const (
	MessageType_FRIEND         MessageType = 0
	MessageType_FRIEND_MESSAGE MessageType = 1
	MessageType_FRIEND_TYPE    MessageType = 2
	MessageType_GROUP          MessageType = 3
	MessageType_GROUP_USER     MessageType = 4
	MessageType_USER           MessageType = 5
	MessageType_GROUP_MESSAGE  MessageType = 6
	MessageType_BLOG           MessageType = 7
	MessageType_BLOG_MESSAGE   MessageType = 8
)

var MessageType_name = map[int32]string{
	0: "FRIEND",
	1: "FRIEND_MESSAGE",
	2: "FRIEND_TYPE",
	3: "GROUP",
	4: "GROUP_USER",
	5: "USER",
	6: "GROUP_MESSAGE",
	7: "BLOG",
	8: "BLOG_MESSAGE",
}

var MessageType_value = map[string]int32{
	"FRIEND":         0,
	"FRIEND_MESSAGE": 1,
	"FRIEND_TYPE":    2,
	"GROUP":          3,
	"GROUP_USER":     4,
	"USER":           5,
	"GROUP_MESSAGE":  6,
	"BLOG":           7,
	"BLOG_MESSAGE":   8,
}

func (x MessageType) String() string {
	return proto.EnumName(MessageType_name, int32(x))
}

func (MessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_53c971822f22e4ad, []int{0}
}

type RpcResult struct {
	RpcCode              int32    `protobuf:"varint,1,opt,name=rpc_code,json=rpcCode,proto3" json:"rpc_code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data                 *any.Any `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RpcResult) Reset()         { *m = RpcResult{} }
func (m *RpcResult) String() string { return proto.CompactTextString(m) }
func (*RpcResult) ProtoMessage()    {}
func (*RpcResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_53c971822f22e4ad, []int{0}
}

func (m *RpcResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RpcResult.Unmarshal(m, b)
}
func (m *RpcResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RpcResult.Marshal(b, m, deterministic)
}
func (m *RpcResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcResult.Merge(m, src)
}
func (m *RpcResult) XXX_Size() int {
	return xxx_messageInfo_RpcResult.Size(m)
}
func (m *RpcResult) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcResult.DiscardUnknown(m)
}

var xxx_messageInfo_RpcResult proto.InternalMessageInfo

func (m *RpcResult) GetRpcCode() int32 {
	if m != nil {
		return m.RpcCode
	}
	return 0
}

func (m *RpcResult) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *RpcResult) GetData() *any.Any {
	if m != nil {
		return m.Data
	}
	return nil
}

type Empty struct {
	Type                 MessageType `protobuf:"varint,1,opt,name=type,proto3,enum=com.dipper.proto.rpc.MessageType" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_53c971822f22e4ad, []int{1}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

func (m *Empty) GetType() MessageType {
	if m != nil {
		return m.Type
	}
	return MessageType_FRIEND
}

type DataList struct {
	Data                 []*any.Any `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *DataList) Reset()         { *m = DataList{} }
func (m *DataList) String() string { return proto.CompactTextString(m) }
func (*DataList) ProtoMessage()    {}
func (*DataList) Descriptor() ([]byte, []int) {
	return fileDescriptor_53c971822f22e4ad, []int{2}
}

func (m *DataList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataList.Unmarshal(m, b)
}
func (m *DataList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataList.Marshal(b, m, deterministic)
}
func (m *DataList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataList.Merge(m, src)
}
func (m *DataList) XXX_Size() int {
	return xxx_messageInfo_DataList.Size(m)
}
func (m *DataList) XXX_DiscardUnknown() {
	xxx_messageInfo_DataList.DiscardUnknown(m)
}

var xxx_messageInfo_DataList proto.InternalMessageInfo

func (m *DataList) GetData() []*any.Any {
	if m != nil {
		return m.Data
	}
	return nil
}

type KeyId struct {
	Type                 MessageType `protobuf:"varint,1,opt,name=type,proto3,enum=com.dipper.proto.rpc.MessageType" json:"type,omitempty"`
	KeyId                int32       `protobuf:"varint,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *KeyId) Reset()         { *m = KeyId{} }
func (m *KeyId) String() string { return proto.CompactTextString(m) }
func (*KeyId) ProtoMessage()    {}
func (*KeyId) Descriptor() ([]byte, []int) {
	return fileDescriptor_53c971822f22e4ad, []int{3}
}

func (m *KeyId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KeyId.Unmarshal(m, b)
}
func (m *KeyId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KeyId.Marshal(b, m, deterministic)
}
func (m *KeyId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyId.Merge(m, src)
}
func (m *KeyId) XXX_Size() int {
	return xxx_messageInfo_KeyId.Size(m)
}
func (m *KeyId) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyId.DiscardUnknown(m)
}

var xxx_messageInfo_KeyId proto.InternalMessageInfo

func (m *KeyId) GetType() MessageType {
	if m != nil {
		return m.Type
	}
	return MessageType_FRIEND
}

func (m *KeyId) GetKeyId() int32 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

type Entry struct {
	Type                 MessageType `protobuf:"varint,1,opt,name=type,proto3,enum=com.dipper.proto.rpc.MessageType" json:"type,omitempty"`
	Entry                *any.Any    `protobuf:"bytes,2,opt,name=entry,proto3" json:"entry,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Entry) Reset()         { *m = Entry{} }
func (m *Entry) String() string { return proto.CompactTextString(m) }
func (*Entry) ProtoMessage()    {}
func (*Entry) Descriptor() ([]byte, []int) {
	return fileDescriptor_53c971822f22e4ad, []int{4}
}

func (m *Entry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Entry.Unmarshal(m, b)
}
func (m *Entry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Entry.Marshal(b, m, deterministic)
}
func (m *Entry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Entry.Merge(m, src)
}
func (m *Entry) XXX_Size() int {
	return xxx_messageInfo_Entry.Size(m)
}
func (m *Entry) XXX_DiscardUnknown() {
	xxx_messageInfo_Entry.DiscardUnknown(m)
}

var xxx_messageInfo_Entry proto.InternalMessageInfo

func (m *Entry) GetType() MessageType {
	if m != nil {
		return m.Type
	}
	return MessageType_FRIEND
}

func (m *Entry) GetEntry() *any.Any {
	if m != nil {
		return m.Entry
	}
	return nil
}

type EntryList struct {
	Type                 MessageType `protobuf:"varint,1,opt,name=type,proto3,enum=com.dipper.proto.rpc.MessageType" json:"type,omitempty"`
	Entry                []*any.Any  `protobuf:"bytes,2,rep,name=entry,proto3" json:"entry,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *EntryList) Reset()         { *m = EntryList{} }
func (m *EntryList) String() string { return proto.CompactTextString(m) }
func (*EntryList) ProtoMessage()    {}
func (*EntryList) Descriptor() ([]byte, []int) {
	return fileDescriptor_53c971822f22e4ad, []int{5}
}

func (m *EntryList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EntryList.Unmarshal(m, b)
}
func (m *EntryList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EntryList.Marshal(b, m, deterministic)
}
func (m *EntryList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntryList.Merge(m, src)
}
func (m *EntryList) XXX_Size() int {
	return xxx_messageInfo_EntryList.Size(m)
}
func (m *EntryList) XXX_DiscardUnknown() {
	xxx_messageInfo_EntryList.DiscardUnknown(m)
}

var xxx_messageInfo_EntryList proto.InternalMessageInfo

func (m *EntryList) GetType() MessageType {
	if m != nil {
		return m.Type
	}
	return MessageType_FRIEND
}

func (m *EntryList) GetEntry() []*any.Any {
	if m != nil {
		return m.Entry
	}
	return nil
}

type PageInfo struct {
	Type                 MessageType `protobuf:"varint,1,opt,name=type,proto3,enum=com.dipper.proto.rpc.MessageType" json:"type,omitempty"`
	PageNum              int32       `protobuf:"varint,2,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`
	PageSize             int32       `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *PageInfo) Reset()         { *m = PageInfo{} }
func (m *PageInfo) String() string { return proto.CompactTextString(m) }
func (*PageInfo) ProtoMessage()    {}
func (*PageInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_53c971822f22e4ad, []int{6}
}

func (m *PageInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PageInfo.Unmarshal(m, b)
}
func (m *PageInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PageInfo.Marshal(b, m, deterministic)
}
func (m *PageInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PageInfo.Merge(m, src)
}
func (m *PageInfo) XXX_Size() int {
	return xxx_messageInfo_PageInfo.Size(m)
}
func (m *PageInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PageInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PageInfo proto.InternalMessageInfo

func (m *PageInfo) GetType() MessageType {
	if m != nil {
		return m.Type
	}
	return MessageType_FRIEND
}

func (m *PageInfo) GetPageNum() int32 {
	if m != nil {
		return m.PageNum
	}
	return 0
}

func (m *PageInfo) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func init() {
	proto.RegisterEnum("com.dipper.proto.rpc.MessageType", MessageType_name, MessageType_value)
	proto.RegisterType((*RpcResult)(nil), "com.dipper.proto.rpc.RpcResult")
	proto.RegisterType((*Empty)(nil), "com.dipper.proto.rpc.Empty")
	proto.RegisterType((*DataList)(nil), "com.dipper.proto.rpc.DataList")
	proto.RegisterType((*KeyId)(nil), "com.dipper.proto.rpc.KeyId")
	proto.RegisterType((*Entry)(nil), "com.dipper.proto.rpc.Entry")
	proto.RegisterType((*EntryList)(nil), "com.dipper.proto.rpc.EntryList")
	proto.RegisterType((*PageInfo)(nil), "com.dipper.proto.rpc.PageInfo")
}

func init() {
	proto.RegisterFile("BaseService.proto", fileDescriptor_53c971822f22e4ad)
}

var fileDescriptor_53c971822f22e4ad = []byte{
	// 570 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x95, 0x51, 0x6f, 0xda, 0x30,
	0x10, 0xc7, 0x9b, 0x42, 0x20, 0x39, 0x56, 0x96, 0x5a, 0x4c, 0xa2, 0xad, 0xb4, 0xb1, 0xbc, 0x0c,
	0xf5, 0x21, 0x95, 0xba, 0xed, 0x75, 0x52, 0x59, 0x53, 0x86, 0x4a, 0x5b, 0xe4, 0x94, 0x4a, 0x7b,
	0x42, 0x69, 0x72, 0x45, 0x69, 0x43, 0x62, 0x25, 0xa6, 0x52, 0xfa, 0x31, 0xf6, 0x0d, 0xf7, 0x4d,
	0xa6, 0xd8, 0x04, 0x75, 0x12, 0xa8, 0x08, 0x78, 0x73, 0xee, 0xce, 0xbf, 0xbf, 0xff, 0xf6, 0x1d,
	0xc0, 0x7e, 0xc7, 0x4d, 0xd1, 0xc1, 0xe4, 0x39, 0xf0, 0xd0, 0x62, 0x49, 0xcc, 0x63, 0xd2, 0xf0,
	0xe2, 0x89, 0xe5, 0x07, 0x8c, 0x61, 0x22, 0x23, 0x56, 0xc2, 0xbc, 0xc3, 0x83, 0x71, 0x1c, 0x8f,
	0x43, 0x3c, 0x11, 0x91, 0xfb, 0xe9, 0xc3, 0x89, 0x1b, 0x65, 0x32, 0x7d, 0xb8, 0x3f, 0x4c, 0x31,
	0xf9, 0x8f, 0x61, 0x3e, 0x82, 0x4e, 0x99, 0x47, 0x31, 0x9d, 0x86, 0x9c, 0x1c, 0x80, 0x96, 0x30,
	0x6f, 0xe4, 0xc5, 0x3e, 0x36, 0x95, 0x96, 0xd2, 0x56, 0x69, 0x35, 0x61, 0xde, 0xcf, 0xd8, 0x47,
	0xd2, 0x84, 0xea, 0x04, 0xd3, 0xd4, 0x1d, 0x63, 0x73, 0xb7, 0xa5, 0xb4, 0x75, 0x5a, 0x7c, 0x92,
	0x36, 0x94, 0x7d, 0x97, 0xbb, 0xcd, 0x52, 0x4b, 0x69, 0xd7, 0x4e, 0x1b, 0x96, 0x94, 0xb7, 0x0a,
	0x79, 0xeb, 0x2c, 0xca, 0xa8, 0xa8, 0x30, 0x7f, 0x80, 0x6a, 0x4f, 0x18, 0xcf, 0xc8, 0x77, 0x28,
	0xf3, 0x8c, 0x49, 0x8d, 0xfa, 0xe9, 0x67, 0x6b, 0x91, 0x0f, 0xeb, 0x4a, 0xf2, 0x6f, 0x33, 0x86,
	0x54, 0x94, 0x9b, 0xdf, 0x40, 0x3b, 0x77, 0xb9, 0xdb, 0x0f, 0x52, 0x3e, 0x57, 0x55, 0x5a, 0xa5,
	0x37, 0x54, 0x87, 0xa0, 0x5e, 0x62, 0xd6, 0xf3, 0xd7, 0x54, 0x25, 0x1f, 0xa0, 0xf2, 0x84, 0xd9,
	0x28, 0xf0, 0x85, 0x71, 0x95, 0xaa, 0x4f, 0x39, 0xcd, 0x7c, 0x04, 0xd5, 0x8e, 0x78, 0xb2, 0xae,
	0x19, 0x72, 0x0c, 0x2a, 0xe6, 0xfb, 0x05, 0x75, 0x99, 0x03, 0x59, 0x62, 0x46, 0xa0, 0x0b, 0x2d,
	0xe1, 0x7c, 0x73, 0xbd, 0xd2, 0x5b, 0x7a, 0x19, 0x68, 0x03, 0x77, 0x8c, 0xbd, 0xe8, 0x21, 0x5e,
	0x57, 0xee, 0x00, 0x34, 0xe6, 0x8e, 0x71, 0x14, 0x4d, 0x27, 0xb3, 0x7b, 0xab, 0xe6, 0xdf, 0xd7,
	0xd3, 0x09, 0x39, 0x02, 0x5d, 0xa4, 0xd2, 0xe0, 0x05, 0x45, 0xd7, 0xa8, 0x54, 0xd4, 0x3a, 0xc1,
	0x0b, 0x1e, 0xff, 0x51, 0xa0, 0xf6, 0x8a, 0x46, 0x00, 0x2a, 0x17, 0xb4, 0x67, 0x5f, 0x9f, 0x1b,
	0x3b, 0x84, 0x40, 0x5d, 0xae, 0x47, 0x57, 0xb6, 0xe3, 0x9c, 0x75, 0x6d, 0x43, 0x21, 0xef, 0xa1,
	0x36, 0x8b, 0xdd, 0xfe, 0x1e, 0xd8, 0xc6, 0x2e, 0xd1, 0x41, 0xed, 0xd2, 0x9b, 0xe1, 0xc0, 0x28,
	0x91, 0x3a, 0x80, 0x58, 0x8e, 0x86, 0x8e, 0x4d, 0x8d, 0x32, 0xd1, 0xa0, 0x2c, 0x56, 0x2a, 0xd9,
	0x87, 0x3d, 0x99, 0x29, 0x40, 0x95, 0x3c, 0xd9, 0xe9, 0xdf, 0x74, 0x8d, 0x2a, 0x31, 0xe0, 0x5d,
	0xbe, 0x9a, 0xe7, 0xb4, 0xd3, 0xbf, 0x2a, 0xd4, 0x5e, 0x8d, 0x1f, 0xb9, 0x80, 0x72, 0xea, 0x3e,
	0x23, 0x39, 0x5a, 0x7c, 0x1b, 0xe2, 0xad, 0x0e, 0x3f, 0x2d, 0x4e, 0xce, 0xa7, 0xcd, 0xdc, 0x21,
	0x7d, 0x00, 0x1f, 0x43, 0xe4, 0xd8, 0xc9, 0xfb, 0x73, 0x09, 0x4d, 0x34, 0xef, 0x2a, 0xb4, 0x3b,
	0x68, 0x14, 0xb4, 0x41, 0x12, 0x33, 0x4c, 0xb8, 0x6c, 0x98, 0x4d, 0x4f, 0xf9, 0x0b, 0x2a, 0x53,
	0xe6, 0xbb, 0x7c, 0x2b, 0x7e, 0x53, 0x0c, 0xd1, 0xe3, 0x5b, 0xf1, 0x7b, 0x09, 0xba, 0xa4, 0x9d,
	0x85, 0xe1, 0xd2, 0xa3, 0xe5, 0xbf, 0x37, 0xab, 0xc0, 0x28, 0x18, 0xc5, 0xd1, 0x8a, 0xcb, 0xdb,
	0xd8, 0xee, 0x1d, 0x34, 0x24, 0x33, 0x7f, 0x86, 0x2d, 0x72, 0x1d, 0xa8, 0x4b, 0x6e, 0x3e, 0xa4,
	0xe2, 0x89, 0x3f, 0x2e, 0xde, 0x54, 0x0c, 0xf1, 0x0a, 0xd0, 0xce, 0x17, 0x58, 0xf8, 0x77, 0xd2,
	0xd9, 0x3b, 0x17, 0x91, 0x59, 0xeb, 0x0f, 0x94, 0xfb, 0x8a, 0xc8, 0x7d, 0xfd, 0x17, 0x00, 0x00,
	0xff, 0xff, 0xb4, 0xb4, 0x4c, 0x26, 0x91, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BaseServiceClient is the client API for BaseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BaseServiceClient interface {
	Save(ctx context.Context, in *Entry, opts ...grpc.CallOption) (*RpcResult, error)
	DeleteById(ctx context.Context, in *KeyId, opts ...grpc.CallOption) (*RpcResult, error)
	DeleteByPropertyList(ctx context.Context, in *Entry, opts ...grpc.CallOption) (*RpcResult, error)
	Update(ctx context.Context, in *Entry, opts ...grpc.CallOption) (*RpcResult, error)
	SelectById(ctx context.Context, in *KeyId, opts ...grpc.CallOption) (*RpcResult, error)
	SelectAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RpcResult, error)
	SelectByProperty(ctx context.Context, in *Entry, opts ...grpc.CallOption) (*RpcResult, error)
	SelectListByProperty(ctx context.Context, in *Entry, opts ...grpc.CallOption) (*RpcResult, error)
	SelectPageList(ctx context.Context, in *PageInfo, opts ...grpc.CallOption) (*RpcResult, error)
}

type baseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBaseServiceClient(cc grpc.ClientConnInterface) BaseServiceClient {
	return &baseServiceClient{cc}
}

func (c *baseServiceClient) Save(ctx context.Context, in *Entry, opts ...grpc.CallOption) (*RpcResult, error) {
	out := new(RpcResult)
	err := c.cc.Invoke(ctx, "/com.dipper.proto.rpc.BaseService/save", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseServiceClient) DeleteById(ctx context.Context, in *KeyId, opts ...grpc.CallOption) (*RpcResult, error) {
	out := new(RpcResult)
	err := c.cc.Invoke(ctx, "/com.dipper.proto.rpc.BaseService/deleteById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseServiceClient) DeleteByPropertyList(ctx context.Context, in *Entry, opts ...grpc.CallOption) (*RpcResult, error) {
	out := new(RpcResult)
	err := c.cc.Invoke(ctx, "/com.dipper.proto.rpc.BaseService/deleteByPropertyList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseServiceClient) Update(ctx context.Context, in *Entry, opts ...grpc.CallOption) (*RpcResult, error) {
	out := new(RpcResult)
	err := c.cc.Invoke(ctx, "/com.dipper.proto.rpc.BaseService/update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseServiceClient) SelectById(ctx context.Context, in *KeyId, opts ...grpc.CallOption) (*RpcResult, error) {
	out := new(RpcResult)
	err := c.cc.Invoke(ctx, "/com.dipper.proto.rpc.BaseService/selectById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseServiceClient) SelectAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RpcResult, error) {
	out := new(RpcResult)
	err := c.cc.Invoke(ctx, "/com.dipper.proto.rpc.BaseService/selectAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseServiceClient) SelectByProperty(ctx context.Context, in *Entry, opts ...grpc.CallOption) (*RpcResult, error) {
	out := new(RpcResult)
	err := c.cc.Invoke(ctx, "/com.dipper.proto.rpc.BaseService/selectByProperty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseServiceClient) SelectListByProperty(ctx context.Context, in *Entry, opts ...grpc.CallOption) (*RpcResult, error) {
	out := new(RpcResult)
	err := c.cc.Invoke(ctx, "/com.dipper.proto.rpc.BaseService/selectListByProperty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseServiceClient) SelectPageList(ctx context.Context, in *PageInfo, opts ...grpc.CallOption) (*RpcResult, error) {
	out := new(RpcResult)
	err := c.cc.Invoke(ctx, "/com.dipper.proto.rpc.BaseService/selectPageList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BaseServiceServer is the server API for BaseService service.
type BaseServiceServer interface {
	Save(context.Context, *Entry) (*RpcResult, error)
	DeleteById(context.Context, *KeyId) (*RpcResult, error)
	DeleteByPropertyList(context.Context, *Entry) (*RpcResult, error)
	Update(context.Context, *Entry) (*RpcResult, error)
	SelectById(context.Context, *KeyId) (*RpcResult, error)
	SelectAll(context.Context, *Empty) (*RpcResult, error)
	SelectByProperty(context.Context, *Entry) (*RpcResult, error)
	SelectListByProperty(context.Context, *Entry) (*RpcResult, error)
	SelectPageList(context.Context, *PageInfo) (*RpcResult, error)
}

// UnimplementedBaseServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBaseServiceServer struct {
}

func (*UnimplementedBaseServiceServer) Save(ctx context.Context, req *Entry) (*RpcResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Save not implemented")
}
func (*UnimplementedBaseServiceServer) DeleteById(ctx context.Context, req *KeyId) (*RpcResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteById not implemented")
}
func (*UnimplementedBaseServiceServer) DeleteByPropertyList(ctx context.Context, req *Entry) (*RpcResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteByPropertyList not implemented")
}
func (*UnimplementedBaseServiceServer) Update(ctx context.Context, req *Entry) (*RpcResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedBaseServiceServer) SelectById(ctx context.Context, req *KeyId) (*RpcResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectById not implemented")
}
func (*UnimplementedBaseServiceServer) SelectAll(ctx context.Context, req *Empty) (*RpcResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectAll not implemented")
}
func (*UnimplementedBaseServiceServer) SelectByProperty(ctx context.Context, req *Entry) (*RpcResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectByProperty not implemented")
}
func (*UnimplementedBaseServiceServer) SelectListByProperty(ctx context.Context, req *Entry) (*RpcResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectListByProperty not implemented")
}
func (*UnimplementedBaseServiceServer) SelectPageList(ctx context.Context, req *PageInfo) (*RpcResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectPageList not implemented")
}

func RegisterBaseServiceServer(s *grpc.Server, srv BaseServiceServer) {
	s.RegisterService(&_BaseService_serviceDesc, srv)
}

func _BaseService_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Entry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServiceServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.dipper.proto.rpc.BaseService/Save",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServiceServer).Save(ctx, req.(*Entry))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseService_DeleteById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServiceServer).DeleteById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.dipper.proto.rpc.BaseService/DeleteById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServiceServer).DeleteById(ctx, req.(*KeyId))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseService_DeleteByPropertyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Entry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServiceServer).DeleteByPropertyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.dipper.proto.rpc.BaseService/DeleteByPropertyList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServiceServer).DeleteByPropertyList(ctx, req.(*Entry))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Entry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.dipper.proto.rpc.BaseService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServiceServer).Update(ctx, req.(*Entry))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseService_SelectById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServiceServer).SelectById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.dipper.proto.rpc.BaseService/SelectById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServiceServer).SelectById(ctx, req.(*KeyId))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseService_SelectAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServiceServer).SelectAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.dipper.proto.rpc.BaseService/SelectAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServiceServer).SelectAll(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseService_SelectByProperty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Entry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServiceServer).SelectByProperty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.dipper.proto.rpc.BaseService/SelectByProperty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServiceServer).SelectByProperty(ctx, req.(*Entry))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseService_SelectListByProperty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Entry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServiceServer).SelectListByProperty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.dipper.proto.rpc.BaseService/SelectListByProperty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServiceServer).SelectListByProperty(ctx, req.(*Entry))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseService_SelectPageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServiceServer).SelectPageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.dipper.proto.rpc.BaseService/SelectPageList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServiceServer).SelectPageList(ctx, req.(*PageInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _BaseService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "com.dipper.proto.rpc.BaseService",
	HandlerType: (*BaseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "save",
			Handler:    _BaseService_Save_Handler,
		},
		{
			MethodName: "deleteById",
			Handler:    _BaseService_DeleteById_Handler,
		},
		{
			MethodName: "deleteByPropertyList",
			Handler:    _BaseService_DeleteByPropertyList_Handler,
		},
		{
			MethodName: "update",
			Handler:    _BaseService_Update_Handler,
		},
		{
			MethodName: "selectById",
			Handler:    _BaseService_SelectById_Handler,
		},
		{
			MethodName: "selectAll",
			Handler:    _BaseService_SelectAll_Handler,
		},
		{
			MethodName: "selectByProperty",
			Handler:    _BaseService_SelectByProperty_Handler,
		},
		{
			MethodName: "selectListByProperty",
			Handler:    _BaseService_SelectListByProperty_Handler,
		},
		{
			MethodName: "selectPageList",
			Handler:    _BaseService_SelectPageList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "BaseService.proto",
}
