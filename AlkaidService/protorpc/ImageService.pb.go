// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ImageService.proto

package com_dipper_proto_rpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ImageData struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Photo                []byte   `protobuf:"bytes,2,opt,name=photo,proto3" json:"photo,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImageData) Reset()         { *m = ImageData{} }
func (m *ImageData) String() string { return proto.CompactTextString(m) }
func (*ImageData) ProtoMessage()    {}
func (*ImageData) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8eb3179769d6259, []int{0}
}

func (m *ImageData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImageData.Unmarshal(m, b)
}
func (m *ImageData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImageData.Marshal(b, m, deterministic)
}
func (m *ImageData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageData.Merge(m, src)
}
func (m *ImageData) XXX_Size() int {
	return xxx_messageInfo_ImageData.Size(m)
}
func (m *ImageData) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageData.DiscardUnknown(m)
}

var xxx_messageInfo_ImageData proto.InternalMessageInfo

func (m *ImageData) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ImageData) GetPhoto() []byte {
	if m != nil {
		return m.Photo
	}
	return nil
}

type ImageSaveResult struct {
	RpcCode              int32    `protobuf:"varint,1,opt,name=rpc_code,json=rpcCode,proto3" json:"rpc_code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Url                  string   `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImageSaveResult) Reset()         { *m = ImageSaveResult{} }
func (m *ImageSaveResult) String() string { return proto.CompactTextString(m) }
func (*ImageSaveResult) ProtoMessage()    {}
func (*ImageSaveResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8eb3179769d6259, []int{1}
}

func (m *ImageSaveResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImageSaveResult.Unmarshal(m, b)
}
func (m *ImageSaveResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImageSaveResult.Marshal(b, m, deterministic)
}
func (m *ImageSaveResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageSaveResult.Merge(m, src)
}
func (m *ImageSaveResult) XXX_Size() int {
	return xxx_messageInfo_ImageSaveResult.Size(m)
}
func (m *ImageSaveResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageSaveResult.DiscardUnknown(m)
}

var xxx_messageInfo_ImageSaveResult proto.InternalMessageInfo

func (m *ImageSaveResult) GetRpcCode() int32 {
	if m != nil {
		return m.RpcCode
	}
	return 0
}

func (m *ImageSaveResult) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ImageSaveResult) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type ImagePath struct {
	Url                  string   `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImagePath) Reset()         { *m = ImagePath{} }
func (m *ImagePath) String() string { return proto.CompactTextString(m) }
func (*ImagePath) ProtoMessage()    {}
func (*ImagePath) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8eb3179769d6259, []int{2}
}

func (m *ImagePath) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImagePath.Unmarshal(m, b)
}
func (m *ImagePath) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImagePath.Marshal(b, m, deterministic)
}
func (m *ImagePath) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImagePath.Merge(m, src)
}
func (m *ImagePath) XXX_Size() int {
	return xxx_messageInfo_ImagePath.Size(m)
}
func (m *ImagePath) XXX_DiscardUnknown() {
	xxx_messageInfo_ImagePath.DiscardUnknown(m)
}

var xxx_messageInfo_ImagePath proto.InternalMessageInfo

func (m *ImagePath) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type ImageLoadResult struct {
	RpcCode              int32    `protobuf:"varint,1,opt,name=rpc_code,json=rpcCode,proto3" json:"rpc_code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Photo                []byte   `protobuf:"bytes,3,opt,name=photo,proto3" json:"photo,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImageLoadResult) Reset()         { *m = ImageLoadResult{} }
func (m *ImageLoadResult) String() string { return proto.CompactTextString(m) }
func (*ImageLoadResult) ProtoMessage()    {}
func (*ImageLoadResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8eb3179769d6259, []int{3}
}

func (m *ImageLoadResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImageLoadResult.Unmarshal(m, b)
}
func (m *ImageLoadResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImageLoadResult.Marshal(b, m, deterministic)
}
func (m *ImageLoadResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageLoadResult.Merge(m, src)
}
func (m *ImageLoadResult) XXX_Size() int {
	return xxx_messageInfo_ImageLoadResult.Size(m)
}
func (m *ImageLoadResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageLoadResult.DiscardUnknown(m)
}

var xxx_messageInfo_ImageLoadResult proto.InternalMessageInfo

func (m *ImageLoadResult) GetRpcCode() int32 {
	if m != nil {
		return m.RpcCode
	}
	return 0
}

func (m *ImageLoadResult) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ImageLoadResult) GetPhoto() []byte {
	if m != nil {
		return m.Photo
	}
	return nil
}

func init() {
	proto.RegisterType((*ImageData)(nil), "com.dipper.proto.rpc.ImageData")
	proto.RegisterType((*ImageSaveResult)(nil), "com.dipper.proto.rpc.ImageSaveResult")
	proto.RegisterType((*ImagePath)(nil), "com.dipper.proto.rpc.ImagePath")
	proto.RegisterType((*ImageLoadResult)(nil), "com.dipper.proto.rpc.ImageLoadResult")
}

func init() {
	proto.RegisterFile("ImageService.proto", fileDescriptor_c8eb3179769d6259)
}

var fileDescriptor_c8eb3179769d6259 = []byte{
	// 273 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x51, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0xed, 0x9a, 0xd6, 0x36, 0x43, 0x41, 0x19, 0x7a, 0x88, 0x82, 0x58, 0x82, 0x42, 0x4f, 0x39,
	0x28, 0xfe, 0x40, 0xf5, 0x22, 0x78, 0x08, 0xd1, 0x83, 0x07, 0x41, 0xc6, 0xdd, 0xa1, 0x2d, 0x24,
	0x9d, 0x65, 0x93, 0xc6, 0x3f, 0xf3, 0xfb, 0x24, 0x49, 0xdb, 0xf4, 0x50, 0x72, 0xe9, 0x6d, 0xde,
	0xbc, 0xe1, 0xbd, 0x7d, 0x6f, 0x01, 0x5f, 0x33, 0x5a, 0xf0, 0x3b, 0xbb, 0x72, 0xa5, 0x39, 0xb2,
	0x4e, 0x0a, 0xc1, 0x89, 0x96, 0x2c, 0x32, 0x2b, 0x6b, 0xd9, 0x35, 0x9b, 0xc8, 0x59, 0x1d, 0x3e,
	0x81, 0x5f, 0xdf, 0xbe, 0x50, 0x41, 0x88, 0xd0, 0x5f, 0x53, 0xc6, 0x81, 0x9a, 0xaa, 0x99, 0x9f,
	0xd4, 0x33, 0x4e, 0x60, 0x60, 0x97, 0x52, 0x48, 0x70, 0x36, 0x55, 0xb3, 0x71, 0xd2, 0x80, 0xf0,
	0x13, 0x2e, 0x1a, 0x0b, 0x2a, 0x39, 0xe1, 0x7c, 0x93, 0x16, 0x78, 0x05, 0x23, 0x67, 0xf5, 0xb7,
	0x16, 0xd3, 0x08, 0x0c, 0x92, 0xa1, 0xb3, 0xfa, 0x59, 0x0c, 0x63, 0x00, 0xc3, 0x8c, 0xf3, 0x9c,
	0x16, 0x5c, 0xab, 0xf8, 0xc9, 0x0e, 0xe2, 0x25, 0x78, 0x1b, 0x97, 0x06, 0x5e, 0xbd, 0xad, 0xc6,
	0xf0, 0x66, 0xfb, 0xa0, 0x98, 0x8a, 0xe5, 0x8e, 0x56, 0x2d, 0xfd, 0xb5, 0x35, 0x7e, 0x13, 0x32,
	0xa7, 0x18, 0xef, 0x63, 0x79, 0x07, 0xb1, 0x1e, 0xfe, 0x14, 0x8c, 0x0f, 0xab, 0xc3, 0x18, 0xfa,
	0x39, 0x95, 0x8c, 0xb7, 0xd1, 0xb1, 0xf6, 0xa2, 0x7d, 0x75, 0xd7, 0xf7, 0x1d, 0x07, 0x6d, 0x49,
	0x61, 0x0f, 0x3f, 0x60, 0x64, 0xe4, 0x77, 0x9d, 0x0a, 0x99, 0x4e, 0xd5, 0x2a, 0x7f, 0xa7, 0x6a,
	0xdb, 0x40, 0xd8, 0x9b, 0xdf, 0xc1, 0xd1, 0xef, 0x9d, 0x43, 0xa3, 0x55, 0xe1, 0x58, 0xfd, 0x9c,
	0xd7, 0xc4, 0xe3, 0x7f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xab, 0xd0, 0xe1, 0x1f, 0x02, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ImageServiceClient is the client API for ImageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ImageServiceClient interface {
	Save(ctx context.Context, in *ImageData, opts ...grpc.CallOption) (*ImageSaveResult, error)
	Download(ctx context.Context, in *ImagePath, opts ...grpc.CallOption) (*ImageLoadResult, error)
}

type imageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewImageServiceClient(cc grpc.ClientConnInterface) ImageServiceClient {
	return &imageServiceClient{cc}
}

func (c *imageServiceClient) Save(ctx context.Context, in *ImageData, opts ...grpc.CallOption) (*ImageSaveResult, error) {
	out := new(ImageSaveResult)
	err := c.cc.Invoke(ctx, "/com.dipper.proto.rpc.ImageService/save", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageServiceClient) Download(ctx context.Context, in *ImagePath, opts ...grpc.CallOption) (*ImageLoadResult, error) {
	out := new(ImageLoadResult)
	err := c.cc.Invoke(ctx, "/com.dipper.proto.rpc.ImageService/download", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImageServiceServer is the server API for ImageService service.
type ImageServiceServer interface {
	Save(context.Context, *ImageData) (*ImageSaveResult, error)
	Download(context.Context, *ImagePath) (*ImageLoadResult, error)
}

// UnimplementedImageServiceServer can be embedded to have forward compatible implementations.
type UnimplementedImageServiceServer struct {
}

func (*UnimplementedImageServiceServer) Save(ctx context.Context, req *ImageData) (*ImageSaveResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Save not implemented")
}
func (*UnimplementedImageServiceServer) Download(ctx context.Context, req *ImagePath) (*ImageLoadResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Download not implemented")
}

func RegisterImageServiceServer(s *grpc.Server, srv ImageServiceServer) {
	s.RegisterService(&_ImageService_serviceDesc, srv)
}

func _ImageService_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.dipper.proto.rpc.ImageService/Save",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceServer).Save(ctx, req.(*ImageData))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageService_Download_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImagePath)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceServer).Download(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.dipper.proto.rpc.ImageService/Download",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceServer).Download(ctx, req.(*ImagePath))
	}
	return interceptor(ctx, in, info, handler)
}

var _ImageService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "com.dipper.proto.rpc.ImageService",
	HandlerType: (*ImageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "save",
			Handler:    _ImageService_Save_Handler,
		},
		{
			MethodName: "download",
			Handler:    _ImageService_Download_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ImageService.proto",
}
